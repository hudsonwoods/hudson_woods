

// Smooth Scroll

$(function() {
  $('a.scroll[href*=#]:not([href=#])').click(function() {
    if (location.pathname.replace(/^\//,'') == this.pathname.replace(/^\//,'') && location.hostname == this.hostname) {
      var target = $(this.hash);
      target = target.length ? target : $('[name=' + this.hash.slice(1) +']');
      if (target.length) {
        $('html,body').animate({
          scrollTop: target.offset().top
        }, 1000);
        return false;
      }
    }
  });
});




// Generated by CoffeeScript 1.6.2
/*
Sticky Elements Shortcut for jQuery Waypoints - v2.0.4
Copyright (c) 2011-2014 Caleb Troughton
Dual licensed under the MIT license and GPL license.
https://github.com/imakewebthings/jquery-waypoints/blob/master/licenses.txt
*/

(function() {
  (function(root, factory) {
    if (typeof define === 'function' && define.amd) {
      return define(['jquery', 'waypoints'], factory);
    } else {
      return factory(root.jQuery);
    }
  })(this, function($) {
    var defaults, wrap;

    defaults = {
      wrapper: '<div class="sticky-wrapper" />',
      stuckClass: 'stuck'
    };
    wrap = function($elements, options) {
      $elements.wrap(options.wrapper);
      return $elements.parent();
    };
    $.waypoints('extendFn', 'sticky', function(opt) {
      var $wrap, options, originalHandler;

      options = $.extend({}, $.fn.waypoint.defaults, defaults, opt);
      $wrap = wrap(this, options);
      originalHandler = options.handler;
      options.handler = function(direction) {
        var $sticky, shouldBeStuck;

        $sticky = $(this).children(':first');
        shouldBeStuck = direction === 'down' || direction === 'right';
        $sticky.toggleClass(options.stuckClass, shouldBeStuck);
        $wrap.height(shouldBeStuck ? $sticky.outerHeight() : '');
        if (originalHandler != null) {
          return originalHandler.call(this, direction);
        }
      };
      $wrap.waypoint(options);
      return this.data('stuckClass', options.stuckClass);
    });
    return $.waypoints('extendFn', 'unsticky', function() {
      this.parent().waypoint('destroy');
      this.unwrap();
      return this.removeClass(this.data('stuckClass'));
    });
  });

}).call(this);

var navbarHeight = $('.navbar').height();

$(window).scroll(function() {
  var navbarColor = "214,212,203";//color attr for rgba
  var navbarTextColor ="#fff";
  var smallLogoHeight = $('.small-logo').height();
  var bigLogoHeight = $('.big-logo').height();


  var smallLogoEndPos = 0;
  var smallSpeed = (smallLogoHeight / bigLogoHeight);

  var ySmall = ($(window).scrollTop() * smallSpeed);

  var smallPadding = navbarHeight - ySmall;
  if (smallPadding > navbarHeight) { smallPadding = navbarHeight; }
  if (smallPadding < smallLogoEndPos) { smallPadding = smallLogoEndPos; }
  if (smallPadding < 0) { smallPadding = 0; }

  $('.small-logo-container ').css({ "padding-top": smallPadding});

  var navOpacity = ySmall / smallLogoHeight;
  if  (navOpacity > 1) { navOpacity = 1; }
  if (navOpacity < 0 ) { navOpacity = 0; }
  var navBackColor = 'rgba(' + navbarColor + ',' + navOpacity + ')';
  $('.navbar').css({"background-color": navBackColor});
  $('.navbar-inverse .navbar-nav > li > a').css({"color": navbarTextColor});

  var shadowOpacity = navOpacity * 0.4;
  if ( ySmall > 1) {
    $('.navbar').css({"box-shadow": "0 2px 3px rgba(0,0,0," + shadowOpacity + ")"});
  } else {
    $('.navbar').css({"box-shadow": "none"});
  }


});

  /**
 * This demo was prepared for you by Petr Tichy - Ihatetomatoes.net
 * Want to see more similar demos and tutorials?
 * Help by spreading the word about Ihatetomatoes blog.
 * Facebook - https://www.facebook.com/ihatetomatoesblog
 * Twitter - https://twitter.com/ihatetomatoes
 * Google+ - https://plus.google.com/u/0/109859280204979591787/about
 * Article URL: http://ihatetomatoes.net/simple-parallax-scrolling-tutorial/
 */

// ( function( $ ) {

//   // Setup variables
//   $window = $(window);
//   $slide = $('.homeSlide');
//   $body = $('body');

//     //FadeIn all sections
//   $body.imagesLoaded( function() {
//     setTimeout(function() {

//           // Resize sections
//           adjustWindow();

//           // Fade in sections
//         $body.removeClass('loading').addClass('loaded');

//     }, 800);
//   });

//   function adjustWindow(){

//     // Init Skrollr

//     var s = skrollr.init({
//     forceHeight: false
//     });


//     // Refresh Skrollr after resizing our sections
//     s.refresh($('.homeSlide'));

//     // Get window size
//       winH = $window.height();

//       // Keep minimum height 550
//       if(winH <= 550) {
//       winH = 550;
//     }

//       // Resize our slides
//       // $slide.height(winH);

//       // Refresh Skrollr after resizing our sections
//       s.refresh($('.homeSlide'));

//   }

// } )( jQuery );


$('.sticky-wrapper').waypoint(function() {
  $(this).find('.navbar').toggleClass('stuck');
}, { offset: -82 });

$('.sticky-wrapper-secondary').waypoint(function() {
  $(this).find('#secondary-nav').toggleClass('stuck');
}, { offset: 82 });

// $(document).ready(function() {
//     $('#secondary-nav').waypoint('sticky', {
//     offset: 82 // Apply "stuck" when element 30px from top
//   });
// });



/* ========================================================================
 * Bootstrap: scrollspy.js v3.1.1
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    var href
    var process  = $.proxy(this.process, this)

    this.$element       = $(element).is('body') ? $(window) : $(element)
    this.$body          = $('body')
    this.$scrollElement = this.$element.on('scroll.bs.scroll-spy.data-api', process)
    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
    this.selector       = (this.options.target
      || ((href = $(element).attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) //strip for ie7
      || '') + ' .nav li > a'
    this.offsets        = $([])
    this.targets        = $([])
    this.activeTarget   = null

    this.refresh()
    this.process()
  }

  ScrollSpy.DEFAULTS = {
    offset: 10
  }

  ScrollSpy.prototype.refresh = function () {
    var offsetMethod = this.$element[0] == window ? 'offset' : 'position'

    this.offsets = $([])
    this.targets = $([])

    var self     = this
    var $targets = this.$body
      .find(this.selector)
      .map(function () {
        var $el   = $(this)
        var href  = $el.data('target') || $el.attr('href')
        var $href = /^#./.test(href) && $(href)

        return ($href
          && $href.length
          && $href.is(':visible')
          && [[ $href[offsetMethod]().top + (!$.isWindow(self.$scrollElement.get(0)) && self.$scrollElement.scrollTop()), href ]]) || null
      })
      .sort(function (a, b) { return a[0] - b[0] })
      .each(function () {
        self.offsets.push(this[0])
        self.targets.push(this[1])
      })
  }

  ScrollSpy.prototype.process = function () {
    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
    var scrollHeight = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight
    var maxScroll    = scrollHeight - this.$scrollElement.height()
    var offsets      = this.offsets
    var targets      = this.targets
    var activeTarget = this.activeTarget
    var i

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets.last()[0]) && this.activate(i)
    }

    if (activeTarget && scrollTop <= offsets[0]) {
      return activeTarget != (i = targets[0]) && this.activate(i)
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i]
        && scrollTop >= offsets[i]
        && (!offsets[i + 1] || scrollTop <= offsets[i + 1])
        && this.activate( targets[i] )
    }
  }

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target

    $(this.selector)
      .parentsUntil(this.options.target, '.active')
      .removeClass('active')

    var selector = this.selector +
        '[data-target="' + target + '"],' +
        this.selector + '[href="' + target + '"]'

    var active = $(selector)
      .parents('li')
      .addClass('active')

    if (active.parent('.dropdown-menu').length) {
      active = active
        .closest('li.dropdown')
        .addClass('active')
    }

    active.trigger('activate.bs.scrollspy')
  }


  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  var old = $.fn.scrollspy

  $.fn.scrollspy = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.scrollspy')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.scrollspy.Constructor = ScrollSpy


  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


  // SCROLLSPY DATA-API
  // ==================

  $(window).on('load', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      $spy.scrollspy($spy.data())
    })
  })

}(jQuery);


$('body').scrollspy({ target: '#secondary-nav-list'});

// Upgrades content filtering

$('#upgrades-nav #all').click(function(event){
    $('.all').show(200);
    event.preventDefault();
    return false;
});

$('#upgrades-nav #house').click(function(event){
    $('.all').hide(200);
    $('.house').show(200);
    event.preventDefault();
    return false;
});

$('#upgrades-nav #site').click(function(event){
    $('.all').hide(200);
    $('.site').show(200);
    event.preventDefault();
    return false;
});

$('#upgrades-nav #land').click(function(event){
    $('.all').hide(200);
    $('.land').show(200);
    event.preventDefault();
    return false;
});

$('#upgrades-nav #equipment').click(function(event){
    $('.all').hide(200);
    $('.equipment').show(200);
    event.preventDefault();
    return false;
});

// Upgrades slideshow code

//randomize landing page slideshow
$("#slideshow .slideshow-image").sort(function(){
    return Math.random()*10 > 5 ? 1 : -1;
}).each(function(){
    var $t = $(this),
        color = $t.attr("class");
    $t.css({}).appendTo( $t.parent() );
});

// slideshow code
$("#slideshow > div:gt(0)").hide();

setInterval(function() {
  $('#slideshow > div:first')
    .fadeOut(2000)
    .next()
    .fadeIn(2000)
    .end()
    .appendTo('#slideshow');
},  3500);

// Gallery Code
$(window).load( function() {
    $('.sp-wrap').smoothproducts();
});

// Magnific Popup
$('.magnific-popup').magnificPopup({ 
  type: 'image',
  image: {
    titleSrc: function(item) {
      return item.el.find('span').text();
    },
    tError: '<a href="%url%">The image #%curr%</a> could not be loaded.'
  }
  // other options
});

// Slick Carousel Initializer 

$('.slick-carousel-upgrades').slick({
  dots: false,
  arrows: false,
  infinite: true,
  speed: 1500,
  fade: true,
  autoplay: true
});

$('.slick-carousel-landing').slick({
  dots: true,
  arrows: false,
  infinite: true,
  speed: 1500,
  fade: true,
  autoplay: false
});

// Activate Upgrades Bootstrap Tabs
$('#upgrades-nav li a').click(function (e) {
  e.preventDefault()
  $(this).tab('show')
})


// Initialize fitvids (100% width video embeds) on Journal
$(document).ready(function(){
  // Target your .container, .wrapper, .post, etc.
  $(".video").fitVids();
});

// upgrades scroll position hack

$('.upgrades-scroll').click(function () {
    $('html,body').animate({
        scrollTop: $("#upgrades-anchor").offset().top
    }, 800);
});

$('#upgrades').css({'min-height':(($(window).height())-256)+'px'});



